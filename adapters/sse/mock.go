// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -package=sse -destination=mock.go -source=interfaces.go
//

// Package sse is a generated GoMock package.
package sse

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIChannel is a mock of IChannel interface.
type MockIChannel[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockIChannelMockRecorder[T]
	isgomock struct{}
}

// MockIChannelMockRecorder is the mock recorder for MockIChannel.
type MockIChannelMockRecorder[T any] struct {
	mock *MockIChannel[T]
}

// NewMockIChannel creates a new mock instance.
func NewMockIChannel[T any](ctrl *gomock.Controller) *MockIChannel[T] {
	mock := &MockIChannel[T]{ctrl: ctrl}
	mock.recorder = &MockIChannelMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChannel[T]) EXPECT() *MockIChannelMockRecorder[T] {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockIChannel[T]) Broadcast(message T) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", message)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockIChannelMockRecorder[T]) Broadcast(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockIChannel[T])(nil).Broadcast), message)
}

// IsIdle mocks base method.
func (m *MockIChannel[T]) IsIdle() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIdle")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsIdle indicates an expected call of IsIdle.
func (mr *MockIChannelMockRecorder[T]) IsIdle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIdle", reflect.TypeOf((*MockIChannel[T])(nil).IsIdle))
}

// Subscribe mocks base method.
func (m *MockIChannel[T]) Subscribe() <-chan T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe")
	ret0, _ := ret[0].(<-chan T)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockIChannelMockRecorder[T]) Subscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockIChannel[T])(nil).Subscribe))
}

// Unsubscribe mocks base method.
func (m *MockIChannel[T]) Unsubscribe(ch <-chan T) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", ch)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockIChannelMockRecorder[T]) Unsubscribe(ch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockIChannel[T])(nil).Unsubscribe), ch)
}

// UnsubscribeAll mocks base method.
func (m *MockIChannel[T]) UnsubscribeAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsubscribeAll")
}

// UnsubscribeAll indicates an expected call of UnsubscribeAll.
func (mr *MockIChannelMockRecorder[T]) UnsubscribeAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeAll", reflect.TypeOf((*MockIChannel[T])(nil).UnsubscribeAll))
}

// MockIConnectionManager is a mock of IConnectionManager interface.
type MockIConnectionManager[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockIConnectionManagerMockRecorder[T]
	isgomock struct{}
}

// MockIConnectionManagerMockRecorder is the mock recorder for MockIConnectionManager.
type MockIConnectionManagerMockRecorder[T any] struct {
	mock *MockIConnectionManager[T]
}

// NewMockIConnectionManager creates a new mock instance.
func NewMockIConnectionManager[T any](ctrl *gomock.Controller) *MockIConnectionManager[T] {
	mock := &MockIConnectionManager[T]{ctrl: ctrl}
	mock.recorder = &MockIConnectionManagerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConnectionManager[T]) EXPECT() *MockIConnectionManagerMockRecorder[T] {
	return m.recorder
}

// Done mocks base method.
func (m *MockIConnectionManager[T]) Done() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Done")
}

// Done indicates an expected call of Done.
func (mr *MockIConnectionManagerMockRecorder[T]) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockIConnectionManager[T])(nil).Done))
}

// Publish mocks base method.
func (m *MockIConnectionManager[T]) Publish(channelName string, data T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", channelName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockIConnectionManagerMockRecorder[T]) Publish(channelName, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIConnectionManager[T])(nil).Publish), channelName, data)
}

// Start mocks base method.
func (m *MockIConnectionManager[T]) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockIConnectionManagerMockRecorder[T]) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIConnectionManager[T])(nil).Start))
}

// Subscribe mocks base method.
func (m *MockIConnectionManager[T]) Subscribe(channelName string) (<-chan T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", channelName)
	ret0, _ := ret[0].(<-chan T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockIConnectionManagerMockRecorder[T]) Subscribe(channelName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockIConnectionManager[T])(nil).Subscribe), channelName)
}

// Unsubscribe mocks base method.
func (m *MockIConnectionManager[T]) Unsubscribe(channelName string, ch <-chan T) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", channelName, ch)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockIConnectionManagerMockRecorder[T]) Unsubscribe(channelName, ch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockIConnectionManager[T])(nil).Unsubscribe), channelName, ch)
}
