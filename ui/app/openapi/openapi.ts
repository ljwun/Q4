/**
 * This file was auto-generated by openapi-typescript (version 7.6.1).
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auction/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a new auction item
         * @description Create a new auction item.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: {
                    /** @description access token for current user. */
                    accessToken?: string;
                };
            };
            requestBody: {
                content: {
                    "application/json": {
                        title: string;
                        description?: string;
                        /** Format: int64 */
                        startingPrice?: number;
                        /** Format: date-time */
                        startTime?: Date;
                        /** Format: date-time */
                        endTime: Date;
                        carousels?: string[];
                    };
                };
            };
            responses: {
                /** @description Item created successfully. */
                201: {
                    headers: {
                        /** @description The location of the created item. */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid data provided. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"];
                    };
                };
                /** @description Unauthorized access. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auction/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List auction items
         * @description Retrieve auction items with optional filters and sorting.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Search term for filtering items. */
                    title?: string;
                    /** @description Starting price range for filtering items. */
                    startPrice?: {
                        from?: number;
                        to?: number;
                    };
                    /** @description Current bid range for filtering items. */
                    currentBid?: {
                        from?: number;
                        to?: number;
                    };
                    /** @description The auction start time range for filtering items. */
                    startTime?: {
                        /** Format: date-time */
                        from?: Date;
                        /** Format: date-time */
                        to?: Date;
                    };
                    /** @description The auction end time range for filtering items. */
                    endTime?: {
                        /** Format: date-time */
                        from?: Date;
                        /** Format: date-time */
                        to?: Date;
                    };
                    /** @description Sort criteria. */
                    sort?: {
                        /**
                         * @default title
                         * @enum {string}
                         */
                        key?: PathsAuctionItemsGetParametersQuerySortKey;
                        /**
                         * @default asc
                         * @enum {string}
                         */
                        order?: PathsAuctionItemsGetParametersQuerySortOrder;
                    };
                    /** @description The last item ID of the previous page. */
                    lastItemID?: string;
                    /** @description The maximum number of items to return. */
                    size?: number;
                    /** @description Exclude ended items. */
                    excludeEnded?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful retrieval of items. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            count: number;
                            items: {
                                /** Format: uuid */
                                id: string;
                                title: string;
                                /** Format: uint32 */
                                currentBid: number;
                                /** Format: date-time */
                                startTime: Date;
                                /** Format: date-time */
                                endTime: Date;
                                isEnded: boolean;
                            }[];
                        };
                    };
                };
                /** @description Missing parameters. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"];
                    };
                };
                /** @description No items found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auction/item/{itemID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get auction item details
         * @description Retrieve details of a specific auction item.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    itemID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful retrieval of item details. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            title: string;
                            description: string;
                            /** Format: int64 */
                            startPrice: number;
                            bidRecords: components["schemas"]["BidEvent"][];
                            /** Format: date-time */
                            startTime: Date;
                            /** Format: date-time */
                            endTime: Date;
                            carousels: string[];
                        };
                    };
                };
                /** @description Item not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auction/item/{itemID}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Track auction item events
         * @description Stream bidding events for a specific auction item using SSE.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    itemID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful connection to SSE stream. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Auction not started yet. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                        };
                    };
                };
                /** @description Item not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Auction has ended. */
                410: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auction/item/{itemID}/bids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Place a bid on an auction item
         * @description Submit a bid for a specific auction item.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    itemID: string;
                };
                cookie?: {
                    /** @description access token for current user. */
                    accessToken?: string;
                };
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: uint32 */
                        bid: number;
                    };
                };
            };
            responses: {
                /** @description Bid placed successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bid too low. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                        };
                    };
                };
                /** @description Unauthorized access. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Auction not started yet. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                        };
                    };
                };
                /** @description Item not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Auction has ended. */
                410: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/sso/{provider}/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtain authentication url
         * @description Obtain authentication url and redirect.
         */
        get: {
            parameters: {
                query: {
                    /** @description Url to back after finishing authorization. */
                    redirectUrl: string;
                };
                header?: never;
                path: {
                    /** @description Authentication provider. */
                    provider: components["schemas"]["SSOProvider"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Token issued successfully. */
                200: {
                    headers: {
                        /** @description Add authentication state into secure http only cookie. */
                        "Set-Cookie|requestState|HttpOnly;Secure;Max-Age=120"?: string;
                        /** @description Add authentication nonce into secure http only cookie. */
                        "Set-Cookie|requestNonce|HttpOnly;Secure;Max-Age=120"?: string;
                        /** @description Add redirect url into secure http only cookie. */
                        "Set-Cookie|requestRedirectUrl|HttpOnly;Secure;Max-Age=120"?: string;
                        /** @description The location of the login page of authentication server. */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Authentication provider not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/sso/{provider}/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Exchange authorization code
         * @description Exchange authorization code to finish authentication flow and redirect to origin page.
         */
        get: {
            parameters: {
                query: {
                    /** @description Authorization code. */
                    code: string;
                    /** @description Authorization state. */
                    state: string;
                };
                header?: never;
                path: {
                    /** @description Authentication provider. */
                    provider: components["schemas"]["SSOProvider"];
                };
                cookie?: {
                    /** @description Stored authentication state. */
                    requestState?: string;
                    /** @description Stored authentication nonce. */
                    requestNonce?: string;
                    /** @description Stored redirect url. */
                    requestRedirectUrl?: string;
                };
            };
            requestBody?: never;
            responses: {
                /** @description Authentication successfully. */
                200: {
                    headers: {
                        /** @description Remove authentication state from secure http only cookie. */
                        "Unset-Cookie|requestState|HttpOnly;Secure"?: string;
                        /** @description Remove authentication nonce from secure http only cookie. */
                        "Unset-Cookie|requestNonce|HttpOnly;Secure"?: string;
                        /** @description Remove redirect url from secure http only cookie. */
                        "Unset-Cookie|requestRedirectUrl|HttpOnly;Secure"?: string;
                        /** @description Add access token into secure http only cookie. */
                        "Set-Cookie|accessToken|HttpOnly;Secure;Max-Age=10800"?: string;
                        /** @description Add username into secure cookie. */
                        "Set-Cookie|username|Max-Age=10800"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid data provided to verify. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Authentication provider not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/sso/{provider}/link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Link SSO account to existing account.
         * @description Link SSO account to existing account. It work like callback but without cookie and redirectUrl response.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Authentication provider. */
                    provider: components["schemas"]["SSOProvider"];
                };
                cookie?: {
                    /** @description Stored authentication state. */
                    requestState?: string;
                    /** @description Stored authentication nonce. */
                    requestNonce?: string;
                    /** @description Stored redirect url. */
                    requestRedirectUrl?: string;
                    /** @description Access token for current user. */
                    accessToken?: string;
                };
            };
            requestBody: {
                content: {
                    "application/json": {
                        code: string;
                        state: string;
                    };
                };
            };
            responses: {
                /** @description SSO account linked successfully. */
                200: {
                    headers: {
                        /** @description Remove authentication state from secure http only cookie. */
                        "Unset-Cookie|requestState|HttpOnly;Secure"?: string;
                        /** @description Remove authentication nonce from secure http only cookie. */
                        "Unset-Cookie|requestNonce|HttpOnly;Secure"?: string;
                        /** @description Remove redirect url from secure http only cookie. */
                        "Unset-Cookie|requestRedirectUrl|HttpOnly;Secure"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid data provided to verify. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized access. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Authentication provider not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Unlink SSO account from existing account.
         * @description Unlink SSO account from existing account.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Authentication provider. */
                    provider: components["schemas"]["SSOProvider"];
                };
                cookie?: {
                    /** @description Access token for current user. */
                    accessToken?: string;
                };
            };
            requestBody?: never;
            responses: {
                /** @description SSO account unlinked successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized access. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Authentication provider not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Should remain at least one SSO account linked. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Revoke authentication token
         * @description Revoke access token.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: {
                    /** @description access token for current user. */
                    accessToken?: string;
                    /** @description name for current user. */
                    username?: string;
                };
            };
            requestBody?: never;
            responses: {
                /** @description Token revoked successfully. */
                200: {
                    headers: {
                        /** @description Remove access token from secure http only cookie. */
                        "Unset-Cookie|accessToken|HttpOnly;Secure"?: string;
                        /** @description Remove username from secure cookie. */
                        "Unset-Cookie|username|HttpOnly;Secure"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user information
         * @description Retrieve user information.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: {
                    /** @description access token for current user. */
                    accessToken?: string;
                };
            };
            requestBody?: never;
            responses: {
                /** @description Successful retrieval of user information. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            username: string;
                            ssoProviders: components["schemas"]["SSOProviderConnectStatus"];
                        };
                    };
                };
                /** @description Unauthorized access. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update user information
         * @description Update user information.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: {
                    /** @description access token for current user. */
                    accessToken?: string;
                };
            };
            requestBody: {
                content: {
                    "application/json": {
                        username: string;
                    };
                };
            };
            responses: {
                /** @description User information updated successfully. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid data provided. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized access. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload an image
         * @description Upload an image file.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: {
                    /** @description access token for current user. */
                    accessToken?: string;
                };
            };
            requestBody: {
                content: {
                    "application/octet-stream": Blob;
                };
            };
            responses: {
                /** @description Image uploaded successfully. */
                201: {
                    headers: {
                        /** @description The location of the uploaded image. */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid data provided. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponse"];
                    };
                };
                /** @description Unauthorized access. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Too many requests. */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
        };
        BidEvent: {
            user: string;
            /** Format: uint32 */
            bid: number;
            /** Format: date-time */
            time: Date;
        };
        /** @enum {string} */
        SSOProvider: SSOProvider;
        SSOProviderConnectStatus: {
            Internal: boolean;
            Google: boolean;
            GitHub: boolean;
            Microsoft: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export enum PathsAuctionItemsGetParametersQuerySortKey {
    title = "title",
    startPrice = "startPrice",
    currentBid = "currentBid",
    startTime = "startTime",
    endTime = "endTime"
}
export enum PathsAuctionItemsGetParametersQuerySortOrder {
    asc = "asc",
    desc = "desc"
}
export enum SSOProvider {
    Internal = "Internal",
    Google = "Google",
    GitHub = "GitHub",
    Microsoft = "Microsoft"
}
export type operations = Record<string, never>;
