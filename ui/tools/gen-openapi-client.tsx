
import openapiTS, { astToString } from 'openapi-typescript';
import { fileURLToPath } from 'url'
import fs from "node:fs";
import ts from "typescript";
import path from 'path';

const dirname = path.dirname(fileURLToPath(import.meta.url))
const OpenAPISchema = path.join(dirname, "../../openapi.yaml");
const OutputPath = path.join(dirname, "../app/openapi/openapi.ts");
const PackageLockJsonPath = path.join(dirname, "../../package-lock.json");

const BLOB = ts.factory.createTypeReferenceNode(ts.factory.createIdentifier("Blob"));
const DATE = ts.factory.createTypeReferenceNode(ts.factory.createIdentifier("Date"));
const NULL = ts.factory.createLiteralTypeNode(ts.factory.createNull());

async function fn() {
  const schema = readFile(OpenAPISchema);
  console.log(`finish reading schema ${OpenAPISchema}, start generating typescript code`);
  const ast = await openapiTS(schema, {
    transform(schemaObject) {
      if (schemaObject.format === 'binary') {
        return schemaObject.nullable ? ts.factory.createUnionTypeNode([BLOB, NULL]) : BLOB;
      }
      if (schemaObject.type === 'string' && schemaObject.format === 'date-time') {
        return schemaObject.nullable ? ts.factory.createUnionTypeNode([DATE, NULL]) : DATE;
      }
    },
  });
  const output = astToString(ast);
  console.log(`finish generating typescript code, start writing to ${OutputPath}`);
  writeFile(OutputPath, output);
  console.log(`finish writing to ${OutputPath}`);
}

function main() {
  fn().then(() => console.log('done'))
    .catch((err) => {
      console.error(err);
      process.exit(1);
    });
  return
}

main()

function readFile(absolutePath: string): Buffer<ArrayBufferLike> {
  const data = fs.readFileSync(absolutePath)
  const arrayBuffer = data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);
  return Buffer.from(arrayBuffer);
}

function writeFile(absolutePath: string, content: string) {
  const openapiTSVersion = getModuleVersion('openapi-typescript');
  const COMMENT_HEADER = `/**\n * This file was auto-generated by openapi-typescript (version ${openapiTSVersion}).\n * Do not make direct changes to the file.\n */\n\n`;
  fs.writeFileSync(absolutePath, COMMENT_HEADER + content, 'utf8')
}

function getModuleVersion(moduleName: string): string {
  const packageLockJson = JSON.parse(fs.readFileSync(PackageLockJsonPath, 'utf-8'));
  const packagePath = `node_modules/${moduleName}`;
  const packageInfo = packageLockJson.packages[packagePath];
  if (packageInfo && packageInfo.version) {
    return packageInfo.version;
  } else {
    return '版本未找到';
  }
}