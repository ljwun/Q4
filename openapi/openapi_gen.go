// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for GetAuctionItemsParamsSortKey.
const (
	CurrentBid GetAuctionItemsParamsSortKey = "currentBid"
	EndTime    GetAuctionItemsParamsSortKey = "endTime"
	Name       GetAuctionItemsParamsSortKey = "name"
	StartPrice GetAuctionItemsParamsSortKey = "startPrice"
	StartTime  GetAuctionItemsParamsSortKey = "startTime"
)

// Defines values for GetAuctionItemsParamsSortOrder.
const (
	Asc  GetAuctionItemsParamsSortOrder = "asc"
	Desc GetAuctionItemsParamsSortOrder = "desc"
)

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// PostAuctionItemJSONBody defines parameters for PostAuctionItem.
type PostAuctionItemJSONBody struct {
	Description   *[]byte    `json:"description,omitempty"`
	EndTime       time.Time  `json:"endTime"`
	Name          string     `json:"name"`
	StartTime     *time.Time `json:"startTime,omitempty"`
	StartingPrice int64      `json:"startingPrice"`
}

// PostAuctionItemItemIDBidsJSONBody defines parameters for PostAuctionItemItemIDBids.
type PostAuctionItemItemIDBidsJSONBody struct {
	Bid float32 `json:"bid"`
}

// GetAuctionItemsParams defines parameters for GetAuctionItems.
type GetAuctionItemsParams struct {
	// Name Search term for filtering items.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// StartPrice Starting price range for filtering items.
	StartPrice *struct {
		From *int `json:"from,omitempty"`
		To   *int `json:"to,omitempty"`
	} `form:"startPrice,omitempty" json:"startPrice,omitempty"`

	// CurrentBid Current bid range for filtering items.
	CurrentBid *struct {
		From *int `json:"from,omitempty"`
		To   *int `json:"to,omitempty"`
	} `form:"currentBid,omitempty" json:"currentBid,omitempty"`

	// StartTime The auction start time range for filtering items.
	StartTime *struct {
		From *time.Time `json:"from,omitempty"`
		To   *time.Time `json:"to,omitempty"`
	} `form:"startTime,omitempty" json:"startTime,omitempty"`

	// EndTime The auction end time range for filtering items.
	EndTime *struct {
		From *time.Time `json:"from,omitempty"`
		To   *time.Time `json:"to,omitempty"`
	} `form:"endTime,omitempty" json:"endTime,omitempty"`

	// Sort Sort criteria.
	Sort *struct {
		Key   *GetAuctionItemsParamsSortKey   `json:"key,omitempty"`
		Order *GetAuctionItemsParamsSortOrder `json:"order,omitempty"`
	} `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetAuctionItemsParamsSortKey defines parameters for GetAuctionItems.
type GetAuctionItemsParamsSortKey string

// GetAuctionItemsParamsSortOrder defines parameters for GetAuctionItems.
type GetAuctionItemsParamsSortOrder string

// DeleteAuthTokenJSONBody defines parameters for DeleteAuthToken.
type DeleteAuthTokenJSONBody struct {
	AccessToken string `json:"access_token"`
}

// PostAuthTokenJSONBody defines parameters for PostAuthToken.
type PostAuthTokenJSONBody struct {
	AuthorizationCode string `json:"authorization_code"`
	RedirectUrl       string `json:"redirect_url"`
}

// PostAuctionItemJSONRequestBody defines body for PostAuctionItem for application/json ContentType.
type PostAuctionItemJSONRequestBody PostAuctionItemJSONBody

// PostAuctionItemItemIDBidsJSONRequestBody defines body for PostAuctionItemItemIDBids for application/json ContentType.
type PostAuctionItemItemIDBidsJSONRequestBody PostAuctionItemItemIDBidsJSONBody

// DeleteAuthTokenJSONRequestBody defines body for DeleteAuthToken for application/json ContentType.
type DeleteAuthTokenJSONRequestBody DeleteAuthTokenJSONBody

// PostAuthTokenJSONRequestBody defines body for PostAuthToken for application/json ContentType.
type PostAuthTokenJSONRequestBody PostAuthTokenJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new auction item
	// (POST /auction/item)
	PostAuctionItem(c *gin.Context)
	// Get auction item details
	// (GET /auction/item/{itemID})
	GetAuctionItemItemID(c *gin.Context, itemID string)
	// Place a bid on an auction item
	// (POST /auction/item/{itemID}/bids)
	PostAuctionItemItemIDBids(c *gin.Context, itemID string)
	// Track auction item events
	// (GET /auction/item/{itemID}/events)
	GetAuctionItemItemIDEvents(c *gin.Context, itemID string)
	// List auction items
	// (GET /auction/items)
	GetAuctionItems(c *gin.Context, params GetAuctionItemsParams)
	// Revoke authentication token
	// (DELETE /auth/token)
	DeleteAuthToken(c *gin.Context)
	// Obtain authentication token
	// (POST /auth/token)
	PostAuthToken(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAuctionItem operation middleware
func (siw *ServerInterfaceWrapper) PostAuctionItem(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuctionItem(c)
}

// GetAuctionItemItemID operation middleware
func (siw *ServerInterfaceWrapper) GetAuctionItemItemID(c *gin.Context) {

	var err error

	// ------------- Path parameter "itemID" -------------
	var itemID string

	err = runtime.BindStyledParameterWithOptions("simple", "itemID", c.Param("itemID"), &itemID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuctionItemItemID(c, itemID)
}

// PostAuctionItemItemIDBids operation middleware
func (siw *ServerInterfaceWrapper) PostAuctionItemItemIDBids(c *gin.Context) {

	var err error

	// ------------- Path parameter "itemID" -------------
	var itemID string

	err = runtime.BindStyledParameterWithOptions("simple", "itemID", c.Param("itemID"), &itemID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuctionItemItemIDBids(c, itemID)
}

// GetAuctionItemItemIDEvents operation middleware
func (siw *ServerInterfaceWrapper) GetAuctionItemItemIDEvents(c *gin.Context) {

	var err error

	// ------------- Path parameter "itemID" -------------
	var itemID string

	err = runtime.BindStyledParameterWithOptions("simple", "itemID", c.Param("itemID"), &itemID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuctionItemItemIDEvents(c, itemID)
}

// GetAuctionItems operation middleware
func (siw *ServerInterfaceWrapper) GetAuctionItems(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuctionItemsParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "startPrice" -------------

	err = runtime.BindQueryParameter("form", true, false, "startPrice", c.Request.URL.Query(), &params.StartPrice)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startPrice: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "currentBid" -------------

	err = runtime.BindQueryParameter("form", true, false, "currentBid", c.Request.URL.Query(), &params.CurrentBid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter currentBid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "startTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "startTime", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startTime: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "endTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "endTime", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter endTime: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuctionItems(c, params)
}

// DeleteAuthToken operation middleware
func (siw *ServerInterfaceWrapper) DeleteAuthToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAuthToken(c)
}

// PostAuthToken operation middleware
func (siw *ServerInterfaceWrapper) PostAuthToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthToken(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auction/item", wrapper.PostAuctionItem)
	router.GET(options.BaseURL+"/auction/item/:itemID", wrapper.GetAuctionItemItemID)
	router.POST(options.BaseURL+"/auction/item/:itemID/bids", wrapper.PostAuctionItemItemIDBids)
	router.GET(options.BaseURL+"/auction/item/:itemID/events", wrapper.GetAuctionItemItemIDEvents)
	router.GET(options.BaseURL+"/auction/items", wrapper.GetAuctionItems)
	router.DELETE(options.BaseURL+"/auth/token", wrapper.DeleteAuthToken)
	router.POST(options.BaseURL+"/auth/token", wrapper.PostAuthToken)
}
