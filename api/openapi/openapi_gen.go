// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for SSOProvider.
const (
	Github    SSOProvider = "github"
	Google    SSOProvider = "google"
	Internal  SSOProvider = "internal"
	Microsoft SSOProvider = "microsoft"
)

// Defines values for GetAuctionItemsParamsSortKey.
const (
	CurrentBid GetAuctionItemsParamsSortKey = "currentBid"
	EndTime    GetAuctionItemsParamsSortKey = "endTime"
	StartPrice GetAuctionItemsParamsSortKey = "startPrice"
	StartTime  GetAuctionItemsParamsSortKey = "startTime"
	Title      GetAuctionItemsParamsSortKey = "title"
)

// Defines values for GetAuctionItemsParamsSortOrder.
const (
	Asc  GetAuctionItemsParamsSortOrder = "asc"
	Desc GetAuctionItemsParamsSortOrder = "desc"
)

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// BidEvent defines model for BidEvent.
type BidEvent struct {
	Bid  uint32    `json:"bid"`
	Time time.Time `json:"time"`
	User string    `json:"user"`
}

// SSOProvider defines model for SSOProvider.
type SSOProvider string

// PostAuctionItemJSONBody defines parameters for PostAuctionItem.
type PostAuctionItemJSONBody struct {
	Carousels     *[]string  `json:"carousels,omitempty"`
	Description   *string    `json:"description,omitempty"`
	EndTime       time.Time  `json:"endTime"`
	StartTime     *time.Time `json:"startTime,omitempty"`
	StartingPrice *int64     `json:"startingPrice,omitempty"`
	Title         string     `json:"title"`
}

// PostAuctionItemParams defines parameters for PostAuctionItem.
type PostAuctionItemParams struct {
	// AccessToken access token for current user.
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty"`
}

// PostAuctionItemItemIDBidsJSONBody defines parameters for PostAuctionItemItemIDBids.
type PostAuctionItemItemIDBidsJSONBody struct {
	Bid uint32 `json:"bid"`
}

// PostAuctionItemItemIDBidsParams defines parameters for PostAuctionItemItemIDBids.
type PostAuctionItemItemIDBidsParams struct {
	// AccessToken access token for current user.
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty"`
}

// GetAuctionItemsParams defines parameters for GetAuctionItems.
type GetAuctionItemsParams struct {
	// Title Search term for filtering items.
	Title *string `form:"title,omitempty" json:"title,omitempty"`

	// StartPrice Starting price range for filtering items.
	StartPrice *struct {
		From *int `json:"from,omitempty"`
		To   *int `json:"to,omitempty"`
	} `json:"startPrice,omitempty"`

	// CurrentBid Current bid range for filtering items.
	CurrentBid *struct {
		From *int `json:"from,omitempty"`
		To   *int `json:"to,omitempty"`
	} `json:"currentBid,omitempty"`

	// StartTime The auction start time range for filtering items.
	StartTime *struct {
		From *time.Time `json:"from,omitempty"`
		To   *time.Time `json:"to,omitempty"`
	} `json:"startTime,omitempty"`

	// EndTime The auction end time range for filtering items.
	EndTime *struct {
		From *time.Time `json:"from,omitempty"`
		To   *time.Time `json:"to,omitempty"`
	} `json:"endTime,omitempty"`

	// Sort Sort criteria.
	Sort *struct {
		Key   *GetAuctionItemsParamsSortKey   `json:"key,omitempty"`
		Order *GetAuctionItemsParamsSortOrder `json:"order,omitempty"`
	} `json:"sort,omitempty"`

	// LastItemID The last item ID of the previous page.
	LastItemID *openapi_types.UUID `form:"lastItemID,omitempty" json:"lastItemID,omitempty"`

	// Size The maximum number of items to return.
	Size *uint32 `form:"size,omitempty" json:"size,omitempty"`

	// ExcludeEnded Exclude ended items.
	ExcludeEnded *bool `form:"excludeEnded,omitempty" json:"excludeEnded,omitempty"`
}

// GetAuctionItemsParamsSortKey defines parameters for GetAuctionItems.
type GetAuctionItemsParamsSortKey string

// GetAuctionItemsParamsSortOrder defines parameters for GetAuctionItems.
type GetAuctionItemsParamsSortOrder string

// GetAuthLogoutParams defines parameters for GetAuthLogout.
type GetAuthLogoutParams struct {
	// AccessToken access token for current user.
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty"`

	// Username name for current user.
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// GetAuthSsoProviderCallbackParams defines parameters for GetAuthSsoProviderCallback.
type GetAuthSsoProviderCallbackParams struct {
	// Code Authorization code.
	Code string `form:"code" json:"code"`

	// State Authorization state.
	State string `form:"state" json:"state"`

	// RequestState Stored authentication state.
	RequestState *string `form:"requestState,omitempty" json:"requestState,omitempty"`

	// RequestNonce Stored authentication nonce.
	RequestNonce *string `form:"requestNonce,omitempty" json:"requestNonce,omitempty"`

	// RequestRedirectUrl Stored redirect url.
	RequestRedirectUrl *string `form:"requestRedirectUrl,omitempty" json:"requestRedirectUrl,omitempty"`
}

// GetAuthSsoProviderLoginParams defines parameters for GetAuthSsoProviderLogin.
type GetAuthSsoProviderLoginParams struct {
	// RedirectUrl Url to back after finishing authorization.
	RedirectUrl string `form:"redirectUrl" json:"redirectUrl"`
}

// PostImageParams defines parameters for PostImage.
type PostImageParams struct {
	// AccessToken access token for current user.
	AccessToken *string `form:"accessToken,omitempty" json:"accessToken,omitempty"`
}

// PostAuctionItemJSONRequestBody defines body for PostAuctionItem for application/json ContentType.
type PostAuctionItemJSONRequestBody PostAuctionItemJSONBody

// PostAuctionItemItemIDBidsJSONRequestBody defines body for PostAuctionItemItemIDBids for application/json ContentType.
type PostAuctionItemItemIDBidsJSONRequestBody PostAuctionItemItemIDBidsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new auction item
	// (POST /auction/item)
	PostAuctionItem(c *gin.Context, params PostAuctionItemParams)
	// Get auction item details
	// (GET /auction/item/{itemID})
	GetAuctionItemItemID(c *gin.Context, itemID openapi_types.UUID)
	// Place a bid on an auction item
	// (POST /auction/item/{itemID}/bids)
	PostAuctionItemItemIDBids(c *gin.Context, itemID openapi_types.UUID, params PostAuctionItemItemIDBidsParams)
	// Track auction item events
	// (GET /auction/item/{itemID}/events)
	GetAuctionItemItemIDEvents(c *gin.Context, itemID openapi_types.UUID)
	// List auction items
	// (GET /auction/items)
	GetAuctionItems(c *gin.Context, params GetAuctionItemsParams)
	// Revoke authentication token
	// (GET /auth/logout)
	GetAuthLogout(c *gin.Context, params GetAuthLogoutParams)
	// Exchange authorization code
	// (GET /auth/sso/{provider}/callback)
	GetAuthSsoProviderCallback(c *gin.Context, provider SSOProvider, params GetAuthSsoProviderCallbackParams)
	// Obtain authentication url
	// (GET /auth/sso/{provider}/login)
	GetAuthSsoProviderLogin(c *gin.Context, provider SSOProvider, params GetAuthSsoProviderLoginParams)
	// Upload an image
	// (POST /image)
	PostImage(c *gin.Context, params PostImageParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAuctionItem operation middleware
func (siw *ServerInterfaceWrapper) PostAuctionItem(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuctionItemParams

	{
		var cookie string

		if cookie, err = c.Cookie("accessToken"); err == nil {
			var value string
			err = runtime.BindStyledParameterWithOptions("simple", "accessToken", cookie, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
			if err != nil {
				siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter accessToken: %w", err), http.StatusBadRequest)
				return
			}
			params.AccessToken = &value

		}
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuctionItem(c, params)
}

// GetAuctionItemItemID operation middleware
func (siw *ServerInterfaceWrapper) GetAuctionItemItemID(c *gin.Context) {

	var err error

	// ------------- Path parameter "itemID" -------------
	var itemID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "itemID", c.Param("itemID"), &itemID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuctionItemItemID(c, itemID)
}

// PostAuctionItemItemIDBids operation middleware
func (siw *ServerInterfaceWrapper) PostAuctionItemItemIDBids(c *gin.Context) {

	var err error

	// ------------- Path parameter "itemID" -------------
	var itemID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "itemID", c.Param("itemID"), &itemID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuctionItemItemIDBidsParams

	{
		var cookie string

		if cookie, err = c.Cookie("accessToken"); err == nil {
			var value string
			err = runtime.BindStyledParameterWithOptions("simple", "accessToken", cookie, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
			if err != nil {
				siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter accessToken: %w", err), http.StatusBadRequest)
				return
			}
			params.AccessToken = &value

		}
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuctionItemItemIDBids(c, itemID, params)
}

// GetAuctionItemItemIDEvents operation middleware
func (siw *ServerInterfaceWrapper) GetAuctionItemItemIDEvents(c *gin.Context) {

	var err error

	// ------------- Path parameter "itemID" -------------
	var itemID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "itemID", c.Param("itemID"), &itemID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter itemID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuctionItemItemIDEvents(c, itemID)
}

// GetAuctionItems operation middleware
func (siw *ServerInterfaceWrapper) GetAuctionItems(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuctionItemsParams

	// ------------- Optional query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, false, "title", c.Request.URL.Query(), &params.Title)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter title: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "startPrice" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "startPrice", c.Request.URL.Query(), &params.StartPrice)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startPrice: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "currentBid" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "currentBid", c.Request.URL.Query(), &params.CurrentBid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter currentBid: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "startTime" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "startTime", c.Request.URL.Query(), &params.StartTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startTime: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "endTime" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "endTime", c.Request.URL.Query(), &params.EndTime)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter endTime: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "lastItemID" -------------

	err = runtime.BindQueryParameter("form", true, false, "lastItemID", c.Request.URL.Query(), &params.LastItemID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lastItemID: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", c.Request.URL.Query(), &params.Size)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter size: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "excludeEnded" -------------

	err = runtime.BindQueryParameter("form", true, false, "excludeEnded", c.Request.URL.Query(), &params.ExcludeEnded)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter excludeEnded: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuctionItems(c, params)
}

// GetAuthLogout operation middleware
func (siw *ServerInterfaceWrapper) GetAuthLogout(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthLogoutParams

	{
		var cookie string

		if cookie, err = c.Cookie("accessToken"); err == nil {
			var value string
			err = runtime.BindStyledParameterWithOptions("simple", "accessToken", cookie, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
			if err != nil {
				siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter accessToken: %w", err), http.StatusBadRequest)
				return
			}
			params.AccessToken = &value

		}
	}

	{
		var cookie string

		if cookie, err = c.Cookie("username"); err == nil {
			var value string
			err = runtime.BindStyledParameterWithOptions("simple", "username", cookie, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
			if err != nil {
				siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter username: %w", err), http.StatusBadRequest)
				return
			}
			params.Username = &value

		}
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuthLogout(c, params)
}

// GetAuthSsoProviderCallback operation middleware
func (siw *ServerInterfaceWrapper) GetAuthSsoProviderCallback(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider SSOProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthSsoProviderCallbackParams

	// ------------- Required query parameter "code" -------------

	if paramValue := c.Query("code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "state" -------------

	if paramValue := c.Query("state"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument state is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	{
		var cookie string

		if cookie, err = c.Cookie("requestState"); err == nil {
			var value string
			err = runtime.BindStyledParameterWithOptions("simple", "requestState", cookie, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
			if err != nil {
				siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter requestState: %w", err), http.StatusBadRequest)
				return
			}
			params.RequestState = &value

		}
	}

	{
		var cookie string

		if cookie, err = c.Cookie("requestNonce"); err == nil {
			var value string
			err = runtime.BindStyledParameterWithOptions("simple", "requestNonce", cookie, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
			if err != nil {
				siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter requestNonce: %w", err), http.StatusBadRequest)
				return
			}
			params.RequestNonce = &value

		}
	}

	{
		var cookie string

		if cookie, err = c.Cookie("requestRedirectUrl"); err == nil {
			var value string
			err = runtime.BindStyledParameterWithOptions("simple", "requestRedirectUrl", cookie, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
			if err != nil {
				siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter requestRedirectUrl: %w", err), http.StatusBadRequest)
				return
			}
			params.RequestRedirectUrl = &value

		}
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuthSsoProviderCallback(c, provider, params)
}

// GetAuthSsoProviderLogin operation middleware
func (siw *ServerInterfaceWrapper) GetAuthSsoProviderLogin(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider SSOProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthSsoProviderLoginParams

	// ------------- Required query parameter "redirectUrl" -------------

	if paramValue := c.Query("redirectUrl"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument redirectUrl is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirectUrl", c.Request.URL.Query(), &params.RedirectUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter redirectUrl: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuthSsoProviderLogin(c, provider, params)
}

// PostImage operation middleware
func (siw *ServerInterfaceWrapper) PostImage(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostImageParams

	{
		var cookie string

		if cookie, err = c.Cookie("accessToken"); err == nil {
			var value string
			err = runtime.BindStyledParameterWithOptions("simple", "accessToken", cookie, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
			if err != nil {
				siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter accessToken: %w", err), http.StatusBadRequest)
				return
			}
			params.AccessToken = &value

		}
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostImage(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auction/item", wrapper.PostAuctionItem)
	router.GET(options.BaseURL+"/auction/item/:itemID", wrapper.GetAuctionItemItemID)
	router.POST(options.BaseURL+"/auction/item/:itemID/bids", wrapper.PostAuctionItemItemIDBids)
	router.GET(options.BaseURL+"/auction/item/:itemID/events", wrapper.GetAuctionItemItemIDEvents)
	router.GET(options.BaseURL+"/auction/items", wrapper.GetAuctionItems)
	router.GET(options.BaseURL+"/auth/logout", wrapper.GetAuthLogout)
	router.GET(options.BaseURL+"/auth/sso/:provider/callback", wrapper.GetAuthSsoProviderCallback)
	router.GET(options.BaseURL+"/auth/sso/:provider/login", wrapper.GetAuthSsoProviderLogin)
	router.POST(options.BaseURL+"/image", wrapper.PostImage)
}

type PostAuctionItemRequestObject struct {
	Params PostAuctionItemParams
	Body   *PostAuctionItemJSONRequestBody
}

type PostAuctionItemResponseObject interface {
	VisitPostAuctionItemResponse(w http.ResponseWriter) error
}

type PostAuctionItem201ResponseHeaders struct {
	Location string
}

type PostAuctionItem201Response struct {
	Headers PostAuctionItem201ResponseHeaders
}

func (response PostAuctionItem201Response) VisitPostAuctionItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", response.Headers.Location)

	w.WriteHeader(201)
	return nil
}

type PostAuctionItem400JSONResponse ApiResponse

func (response PostAuctionItem400JSONResponse) VisitPostAuctionItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuctionItem401Response struct {
}

func (response PostAuctionItem401Response) VisitPostAuctionItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetAuctionItemItemIDRequestObject struct {
	ItemID openapi_types.UUID `json:"itemID"`
}

type GetAuctionItemItemIDResponseObject interface {
	VisitGetAuctionItemItemIDResponse(w http.ResponseWriter) error
}

type GetAuctionItemItemID200JSONResponse struct {
	BidRecords  []BidEvent `json:"bidRecords"`
	Carousels   []string   `json:"carousels"`
	Description string     `json:"description"`
	EndTime     time.Time  `json:"endTime"`
	StartPrice  int64      `json:"startPrice"`
	StartTime   time.Time  `json:"startTime"`
	Title       string     `json:"title"`
}

func (response GetAuctionItemItemID200JSONResponse) VisitGetAuctionItemItemIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAuctionItemItemID404Response struct {
}

func (response GetAuctionItemItemID404Response) VisitGetAuctionItemItemIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostAuctionItemItemIDBidsRequestObject struct {
	ItemID openapi_types.UUID `json:"itemID"`
	Params PostAuctionItemItemIDBidsParams
	Body   *PostAuctionItemItemIDBidsJSONRequestBody
}

type PostAuctionItemItemIDBidsResponseObject interface {
	VisitPostAuctionItemItemIDBidsResponse(w http.ResponseWriter) error
}

type PostAuctionItemItemIDBids200Response struct {
}

func (response PostAuctionItemItemIDBids200Response) VisitPostAuctionItemItemIDBidsResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostAuctionItemItemIDBids400JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response PostAuctionItemItemIDBids400JSONResponse) VisitPostAuctionItemItemIDBidsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuctionItemItemIDBids401Response struct {
}

func (response PostAuctionItemItemIDBids401Response) VisitPostAuctionItemItemIDBidsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostAuctionItemItemIDBids403JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response PostAuctionItemItemIDBids403JSONResponse) VisitPostAuctionItemItemIDBidsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostAuctionItemItemIDBids404Response struct {
}

func (response PostAuctionItemItemIDBids404Response) VisitPostAuctionItemItemIDBidsResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostAuctionItemItemIDBids410JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response PostAuctionItemItemIDBids410JSONResponse) VisitPostAuctionItemItemIDBidsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(410)

	return json.NewEncoder(w).Encode(response)
}

type GetAuctionItemItemIDEventsRequestObject struct {
	ItemID openapi_types.UUID `json:"itemID"`
}

type GetAuctionItemItemIDEventsResponseObject interface {
	VisitGetAuctionItemItemIDEventsResponse(w http.ResponseWriter) error
}

type GetAuctionItemItemIDEvents200Response struct {
}

func (response GetAuctionItemItemIDEvents200Response) VisitGetAuctionItemItemIDEventsResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetAuctionItemItemIDEvents403JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response GetAuctionItemItemIDEvents403JSONResponse) VisitGetAuctionItemItemIDEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAuctionItemItemIDEvents404Response struct {
}

func (response GetAuctionItemItemIDEvents404Response) VisitGetAuctionItemItemIDEventsResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetAuctionItemItemIDEvents410JSONResponse struct {
	Message *string `json:"message,omitempty"`
}

func (response GetAuctionItemItemIDEvents410JSONResponse) VisitGetAuctionItemItemIDEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(410)

	return json.NewEncoder(w).Encode(response)
}

type GetAuctionItemsRequestObject struct {
	Params GetAuctionItemsParams
}

type GetAuctionItemsResponseObject interface {
	VisitGetAuctionItemsResponse(w http.ResponseWriter) error
}

type GetAuctionItems200JSONResponse struct {
	Count int `json:"count"`
	Items []struct {
		CurrentBid uint32             `json:"currentBid"`
		EndTime    time.Time          `json:"endTime"`
		Id         openapi_types.UUID `json:"id"`
		IsEnded    bool               `json:"isEnded"`
		StartTime  time.Time          `json:"startTime"`
		Title      string             `json:"title"`
	} `json:"items"`
}

func (response GetAuctionItems200JSONResponse) VisitGetAuctionItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAuctionItems400JSONResponse ApiResponse

func (response GetAuctionItems400JSONResponse) VisitGetAuctionItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAuctionItems404Response struct {
}

func (response GetAuctionItems404Response) VisitGetAuctionItemsResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetAuthLogoutRequestObject struct {
	Params GetAuthLogoutParams
}

type GetAuthLogoutResponseObject interface {
	VisitGetAuthLogoutResponse(w http.ResponseWriter) error
}

type GetAuthLogout200ResponseHeaders struct {
	UnsetCookieAccessTokenHttpOnlySecure string
	UnsetCookieUsernameHttpOnlySecure    string
}

type GetAuthLogout200Response struct {
	Headers GetAuthLogout200ResponseHeaders
}

func (response GetAuthLogout200Response) VisitGetAuthLogoutResponse(w http.ResponseWriter) error {

	http.SetCookie(w, &http.Cookie{
		Name:     "accessToken",
		Value:    "", // 清空 cookie
		Secure:   true,
		HttpOnly: true,
		Path:     "/",
		SameSite: http.SameSiteStrictMode,
		Expires:  time.Unix(0, 0),
	})

	http.SetCookie(w, &http.Cookie{
		Name:     "username",
		Value:    "", // 清空 cookie
		Secure:   true,
		HttpOnly: true,
		Path:     "/",
		SameSite: http.SameSiteStrictMode,
		Expires:  time.Unix(0, 0),
	})
	w.WriteHeader(200)
	return nil
}

type GetAuthSsoProviderCallbackRequestObject struct {
	Provider SSOProvider `json:"provider"`
	Params   GetAuthSsoProviderCallbackParams
}

type GetAuthSsoProviderCallbackResponseObject interface {
	VisitGetAuthSsoProviderCallbackResponse(w http.ResponseWriter) error
}

type GetAuthSsoProviderCallback200ResponseHeaders struct {
	SetCookieAccessTokenHttpOnlySecureMaxAge10800 string
	SetCookieUsernameMaxAge10800                  string
	UnsetCookieRequestNonceHttpOnlySecure         string
	UnsetCookieRequestRedirectUrlHttpOnlySecure   string
	UnsetCookieRequestStateHttpOnlySecure         string
}

type GetAuthSsoProviderCallback200Response struct {
	Headers GetAuthSsoProviderCallback200ResponseHeaders
}

func (response GetAuthSsoProviderCallback200Response) VisitGetAuthSsoProviderCallbackResponse(w http.ResponseWriter) error {

	http.SetCookie(w, &http.Cookie{
		Name:     "accessToken",
		Value:    response.Headers.SetCookieAccessTokenHttpOnlySecureMaxAge10800,
		Secure:   true,
		HttpOnly: true,
		Path:     "/",
		SameSite: http.SameSiteStrictMode,
		MaxAge:   10800,
	})

	http.SetCookie(w, &http.Cookie{
		Name:     "username",
		Value:    response.Headers.SetCookieUsernameMaxAge10800,
		Secure:   false,
		HttpOnly: false,
		Path:     "/",
		SameSite: http.SameSiteStrictMode,
		MaxAge:   10800,
	})

	http.SetCookie(w, &http.Cookie{
		Name:     "requestNonce",
		Value:    "", // 清空 cookie
		Secure:   true,
		HttpOnly: true,
		Path:     "/",
		SameSite: http.SameSiteStrictMode,
		Expires:  time.Unix(0, 0),
	})

	http.SetCookie(w, &http.Cookie{
		Name:     "requestRedirectUrl",
		Value:    "", // 清空 cookie
		Secure:   true,
		HttpOnly: true,
		Path:     "/",
		SameSite: http.SameSiteStrictMode,
		Expires:  time.Unix(0, 0),
	})

	http.SetCookie(w, &http.Cookie{
		Name:     "requestState",
		Value:    "", // 清空 cookie
		Secure:   true,
		HttpOnly: true,
		Path:     "/",
		SameSite: http.SameSiteStrictMode,
		Expires:  time.Unix(0, 0),
	})
	w.WriteHeader(200)
	return nil
}

type GetAuthSsoProviderCallback404Response struct {
}

func (response GetAuthSsoProviderCallback404Response) VisitGetAuthSsoProviderCallbackResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetAuthSsoProviderLoginRequestObject struct {
	Provider SSOProvider `json:"provider"`
	Params   GetAuthSsoProviderLoginParams
}

type GetAuthSsoProviderLoginResponseObject interface {
	VisitGetAuthSsoProviderLoginResponse(w http.ResponseWriter) error
}

type GetAuthSsoProviderLogin200ResponseHeaders struct {
	Location                                           string
	SetCookieRequestNonceHttpOnlySecureMaxAge120       string
	SetCookieRequestRedirectUrlHttpOnlySecureMaxAge120 string
	SetCookieRequestStateHttpOnlySecureMaxAge120       string
}

type GetAuthSsoProviderLogin200Response struct {
	Headers GetAuthSsoProviderLogin200ResponseHeaders
}

func (response GetAuthSsoProviderLogin200Response) VisitGetAuthSsoProviderLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", response.Headers.Location)

	http.SetCookie(w, &http.Cookie{
		Name:     "requestNonce",
		Value:    response.Headers.SetCookieRequestNonceHttpOnlySecureMaxAge120,
		Secure:   true,
		HttpOnly: true,
		Path:     "/",
		SameSite: http.SameSiteStrictMode,
		MaxAge:   120,
	})

	http.SetCookie(w, &http.Cookie{
		Name:     "requestRedirectUrl",
		Value:    response.Headers.SetCookieRequestRedirectUrlHttpOnlySecureMaxAge120,
		Secure:   true,
		HttpOnly: true,
		Path:     "/",
		SameSite: http.SameSiteStrictMode,
		MaxAge:   120,
	})

	http.SetCookie(w, &http.Cookie{
		Name:     "requestState",
		Value:    response.Headers.SetCookieRequestStateHttpOnlySecureMaxAge120,
		Secure:   true,
		HttpOnly: true,
		Path:     "/",
		SameSite: http.SameSiteStrictMode,
		MaxAge:   120,
	})
	w.WriteHeader(200)
	return nil
}

type GetAuthSsoProviderLogin404Response struct {
}

func (response GetAuthSsoProviderLogin404Response) VisitGetAuthSsoProviderLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostImageRequestObject struct {
	Params PostImageParams
	Body   io.Reader
}

type PostImageResponseObject interface {
	VisitPostImageResponse(w http.ResponseWriter) error
}

type PostImage201ResponseHeaders struct {
	Location string
}

type PostImage201Response struct {
	Headers PostImage201ResponseHeaders
}

func (response PostImage201Response) VisitPostImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", response.Headers.Location)

	w.WriteHeader(201)
	return nil
}

type PostImage400JSONResponse ApiResponse

func (response PostImage400JSONResponse) VisitPostImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostImage401Response struct {
}

func (response PostImage401Response) VisitPostImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostImage429Response struct {
}

func (response PostImage429Response) VisitPostImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(429)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Add a new auction item
	// (POST /auction/item)
	PostAuctionItem(ctx context.Context, request PostAuctionItemRequestObject) (PostAuctionItemResponseObject, error)
	// Get auction item details
	// (GET /auction/item/{itemID})
	GetAuctionItemItemID(ctx context.Context, request GetAuctionItemItemIDRequestObject) (GetAuctionItemItemIDResponseObject, error)
	// Place a bid on an auction item
	// (POST /auction/item/{itemID}/bids)
	PostAuctionItemItemIDBids(ctx context.Context, request PostAuctionItemItemIDBidsRequestObject) (PostAuctionItemItemIDBidsResponseObject, error)
	// Track auction item events
	// (GET /auction/item/{itemID}/events)
	GetAuctionItemItemIDEvents(ctx context.Context, request GetAuctionItemItemIDEventsRequestObject) (GetAuctionItemItemIDEventsResponseObject, error)
	// List auction items
	// (GET /auction/items)
	GetAuctionItems(ctx context.Context, request GetAuctionItemsRequestObject) (GetAuctionItemsResponseObject, error)
	// Revoke authentication token
	// (GET /auth/logout)
	GetAuthLogout(ctx context.Context, request GetAuthLogoutRequestObject) (GetAuthLogoutResponseObject, error)
	// Exchange authorization code
	// (GET /auth/sso/{provider}/callback)
	GetAuthSsoProviderCallback(ctx context.Context, request GetAuthSsoProviderCallbackRequestObject) (GetAuthSsoProviderCallbackResponseObject, error)
	// Obtain authentication url
	// (GET /auth/sso/{provider}/login)
	GetAuthSsoProviderLogin(ctx context.Context, request GetAuthSsoProviderLoginRequestObject) (GetAuthSsoProviderLoginResponseObject, error)
	// Upload an image
	// (POST /image)
	PostImage(ctx context.Context, request PostImageRequestObject) (PostImageResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostAuctionItem operation middleware
func (sh *strictHandler) PostAuctionItem(ctx *gin.Context, params PostAuctionItemParams) {
	var request PostAuctionItemRequestObject

	request.Params = params

	var body PostAuctionItemJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuctionItem(ctx, request.(PostAuctionItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuctionItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAuctionItemResponseObject); ok {
		if err := validResponse.VisitPostAuctionItemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAuctionItemItemID operation middleware
func (sh *strictHandler) GetAuctionItemItemID(ctx *gin.Context, itemID openapi_types.UUID) {
	var request GetAuctionItemItemIDRequestObject

	request.ItemID = itemID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuctionItemItemID(ctx, request.(GetAuctionItemItemIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuctionItemItemID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAuctionItemItemIDResponseObject); ok {
		if err := validResponse.VisitGetAuctionItemItemIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAuctionItemItemIDBids operation middleware
func (sh *strictHandler) PostAuctionItemItemIDBids(ctx *gin.Context, itemID openapi_types.UUID, params PostAuctionItemItemIDBidsParams) {
	var request PostAuctionItemItemIDBidsRequestObject

	request.ItemID = itemID
	request.Params = params

	var body PostAuctionItemItemIDBidsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuctionItemItemIDBids(ctx, request.(PostAuctionItemItemIDBidsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuctionItemItemIDBids")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAuctionItemItemIDBidsResponseObject); ok {
		if err := validResponse.VisitPostAuctionItemItemIDBidsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAuctionItemItemIDEvents operation middleware
func (sh *strictHandler) GetAuctionItemItemIDEvents(ctx *gin.Context, itemID openapi_types.UUID) {
	var request GetAuctionItemItemIDEventsRequestObject

	request.ItemID = itemID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuctionItemItemIDEvents(ctx, request.(GetAuctionItemItemIDEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuctionItemItemIDEvents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAuctionItemItemIDEventsResponseObject); ok {
		if err := validResponse.VisitGetAuctionItemItemIDEventsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAuctionItems operation middleware
func (sh *strictHandler) GetAuctionItems(ctx *gin.Context, params GetAuctionItemsParams) {
	var request GetAuctionItemsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuctionItems(ctx, request.(GetAuctionItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuctionItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAuctionItemsResponseObject); ok {
		if err := validResponse.VisitGetAuctionItemsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAuthLogout operation middleware
func (sh *strictHandler) GetAuthLogout(ctx *gin.Context, params GetAuthLogoutParams) {
	var request GetAuthLogoutRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthLogout(ctx, request.(GetAuthLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAuthLogoutResponseObject); ok {
		if err := validResponse.VisitGetAuthLogoutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAuthSsoProviderCallback operation middleware
func (sh *strictHandler) GetAuthSsoProviderCallback(ctx *gin.Context, provider SSOProvider, params GetAuthSsoProviderCallbackParams) {
	var request GetAuthSsoProviderCallbackRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthSsoProviderCallback(ctx, request.(GetAuthSsoProviderCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthSsoProviderCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAuthSsoProviderCallbackResponseObject); ok {
		if err := validResponse.VisitGetAuthSsoProviderCallbackResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAuthSsoProviderLogin operation middleware
func (sh *strictHandler) GetAuthSsoProviderLogin(ctx *gin.Context, provider SSOProvider, params GetAuthSsoProviderLoginParams) {
	var request GetAuthSsoProviderLoginRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAuthSsoProviderLogin(ctx, request.(GetAuthSsoProviderLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAuthSsoProviderLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAuthSsoProviderLoginResponseObject); ok {
		if err := validResponse.VisitGetAuthSsoProviderLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostImage operation middleware
func (sh *strictHandler) PostImage(ctx *gin.Context, params PostImageParams) {
	var request PostImageRequestObject

	request.Params = params

	request.Body = ctx.Request.Body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostImage(ctx, request.(PostImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostImageResponseObject); ok {
		if err := validResponse.VisitPostImageResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"5QtprF6qDDrF7O53/w8AAP//F2YKq8syAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
